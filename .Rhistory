plot(x, hx, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
head(x,50)
head(dnorm(x),50
)
xyz <- rnorm(n, mean = 1/lambda, sd = sd(means))
plot(xyz)
xyz <- rnorm(t, mean = 1/lambda, sd = sd(means))
plot(xyz)
plot(1:t, xyz)
plot(y=1:t, x=xyz)
xyz <- dnorm(t, mean = 1/lambda, sd = sd(means))
plot(y=1:t, x=xyz)
plot(xyz)
sd(means)
xyz <- pnorm(t, mean = 1/lambda, sd = sd(means))
plot(xyz)
hist(xyz,50)
xyz <- rnorm(t, mean = 1/lambda, sd = sd(means))
hist(xyz,50)
xyz <- rnorm(t, mean = 1/lambda, sd = sd(means))
hist(xyz,50)
xyz <- dnorm(t, mean = 1/lambda, sd = sd(means))
x <- seq(-4, 4, length=100)
hx <- dnorm(x)
x
plot(x)
plot(hx)
x <- seq(min(means), max(means), length=t)
hx <- dnorm(x)
plot(y=hx, x=x)
min(means)
max(means)
t
plot(hx)
hx <- dnorm(x,mean = 1/lambda, sd = sd(means))
plot(hx)
x <- seq(min(means), max(means), length=t)
hx <- dnorm(x,mean = 1/lambda, sd = sd(means))
plot(hx)
plot(x=x, y=hx)
plot(x=x, y=hx, tpye="l")
plot(x=x, y=hx, type="l")
plot(x=x, y=hx, type="l")
plot(myhist)
lines(plot(x=x, y=hx, type="l"))
abline(v = mean(sds), col = "blue", lwd = 2)
plot(myhist)
lines(x=x, y=hx, type="l")
abline(v = mean(sds), col = "blue", lwd = 2)
g <- ggplot(data.frame(x = 1:t, y = means_increasing_n), aes(x = x, y = y))
g
g <- g + geom_hline(yintercept = 1/lambda, col="red", size=1) + geom_line(size = 1, col="black")
g
g <- g + guides(colours=TRUE) + labs(x = "Number of obs", y = "Cumulative mean"); g
?legend
#Example 1 - compare the distribution of 1000 random uniforms
x <- rexp(1000,lambda)
hist(x)
abline(v = 1/lambda, col = "red", lwd = 2)
abline(v = mean(x), col = "green", lwd = 2)
legend(x, legend("Theoretical mean", "Sample Mean"), lty=1, col = c("red", "blue"))
#Example 1 - compare the distribution of 1000 random uniforms
x <- rexp(1000,lambda)
hist(x)
abline(v = 1/lambda, col = "red", lwd = 2)
abline(v = mean(x), col = "green", lwd = 2)
legend("topright", legend("Theoretical mean", "Sample Mean"), lty=1, col = c("red", "blue"))
x <- rexp(1000,lambda)
hist(x)
abline(v = 1/lambda, col = "red", lwd = 2)
abline(v = mean(x), col = "green", lwd = 2)
legend("topright", legend("Theoretical mean", "Sample Mean"), lty=2, col = c("red", "blue"))
#Example 1 - compare the distribution of 1000 random uniforms
x <- rexp(1000,lambda)
hist(x)
abline(v = 1/lambda, col = "red", lwd = 2)
abline(v = mean(x), col = "green", lwd = 2)
legend("topright", legend("Theoretical mean", "Sample Mean"), pch=20, col = c("red", "blue"))
x <- rexp(1000,lambda)
hist(x)
abline(v = 1/lambda, col = "red", lwd = 2)
abline(v = mean(x), col = "green", lwd = 2)
legend(x, "topright", legend("Theoretical mean", "Sample Mean"), pch=20, col = c("red", "blue"))
?legend
#Example 1 - compare the distribution of 1000 random uniforms
x <- rexp(1000,lambda)
hist(x)
abline(v = 1/lambda, col = "red", lwd = 2)
abline(v = mean(x), col = "green", lwd = 2)
legend(x="topright", legend=c("Theoretical mean", "Sample Mean"), pch=20, col = c("red", "blue"))
legend(x="topright", legend=c("Theoretical mean", "Sample Mean"), pch=20, col = c("red", "green"))
?legend
#Example 1 - compare the distribution of 1000 random uniforms
x <- rexp(1000,lambda)
hist(x)
abline(v = 1/lambda, col = "red", lwd = 2)
abline(v = mean(x), col = "green", lwd = 2)
legend(x="topright", legend=c("Theoretical mean", "Sample Mean"), pch=20, col = c("red", "green"), cex=0.5)
#Example 1 - compare the distribution of 1000 random uniforms
x <- rexp(1000,lambda)
hist(x)
abline(v = 1/lambda, col = "red", lwd = 2)
abline(v = mean(x), col = "green", lwd = 2)
legend(x="topright", legend=c("Theoretical mean", "Sample Mean"), pch=20, col = c("red", "green"), cex=0.5)
xlab("x-Values of random exponential generation")
#Example 1 - compare the distribution of 1000 random uniforms
x <- rexp(1000,lambda)
hist(x)
abline(v = 1/lambda, col = "red", lwd = 2)
abline(v = mean(x), col = "green", lwd = 2)
legend(x="topright", legend=c("Theoretical mean", "Sample Mean"), pch=20, col = c("red", "green"), cex=0.5)
labels(xlab="x-Values of random exponential generation")
#Example 1 - compare the distribution of 1000 random uniforms
x <- rexp(1000,lambda)
hist(x,xlab="x-Values of random exponential generation")
abline(v = 1/lambda, col = "red", lwd = 2)
abline(v = mean(x), col = "green", lwd = 2)
legend(x="topright", legend=c("Theoretical mean", "Sample Mean"), pch=20, col = c("red", "green"), cex=0.5)
?legend
#Example 1 - compare the distribution of 1000 random uniforms
x <- rexp(1000,lambda)
hist(x,xlab="x-Values of random exponential generation")
abline(v = 1/lambda, col = "red", lwd = 2)
abline(v = mean(x), col = "green", lwd = 2)
legend(x="topright", legend=c("Theoretical mean", "Sample Mean"), lty=1, lwd=1, col = c("red", "green"), cex=0.7)
hist(x,xlab="x-Values of random exponential generation",10)
hist(x,xlab="x-Values of random exponential generation",20)
#Example 1 - compare the distribution of 1000 random uniforms
x <- rexp(1000,lambda)
hist(x,xlab="x-Values of random exponential generation",20)
abline(v = 1/lambda, col = "red", lwd = 2)
abline(v = mean(x), col = "green", lwd = 2)
legend(x="topright", legend=c("Theoretical mean", "Sample Mean"), lty=1, lwd=1, col = c("red", "green"), cex=0.7)
#Example 1 - compare the distribution of 1000 random uniforms
x <- rexp(1000,lambda)
hist(x,xlab="x-Values of random exponential generation",20)
abline(v = 1/lambda, col = "red", lwd = 2)
abline(v = mean(x), col = "green", lwd = 2)
legend(x="topright", legend=c("Theoretical mean", "Sample Mean"), lty=1, lwd=1, col = c("red", "green"), cex=0.7)
#Example 1 - compare the distribution of 1000 random uniforms
x <- rexp(1000,lambda)
hist(x,xlab="x-Values of random exponential generation",20)
abline(v = 1/lambda, col = "red", lwd = 2)
abline(v = mean(x), col = "green", lwd = 2)
legend(x="topright", legend=c("Theoretical mean", "Sample Mean"), lty=1, lwd=1, col = c("red", "green"), cex=0.7)
#Example 1 - compare the distribution of 1000 random uniforms
x <- rexp(1000,lambda)
hist(x,xlab="x-Values of random exponential generation",20)
abline(v = 1/lambda, col = "red", lwd = 2)
abline(v = mean(x), col = "green", lwd = 2)
legend(x="topright", legend=c("Theoretical mean", "Sample Mean"), lty=1, lwd=1, col = c("red", "green"), cex=0.7)
#Example 1 - compare the distribution of 1000 random uniforms
x <- rexp(1000,lambda)
hist(x,xlab="x-Values of random exponential generation",20)
abline(v = 1/lambda, col = "red", lwd = 2)
abline(v = mean(x), col = "green", lwd = 2)
legend(x="topright", legend=c("Theoretical mean", "Sample Mean"), lty=1, lwd=1, col = c("red", "green"), cex=0.7)
#Example 1 - compare the distribution of 1000 random uniforms
x <- rexp(1000,lambda)
hist(x,xlab="x-Values of random exponential generation",20)
abline(v = 1/lambda, col = "red", lwd = 2)
abline(v = mean(x), col = "green", lwd = 2)
legend(x="topright", legend=c("Theoretical mean", "Sample Mean"), lty=1, lwd=1, col = c("red", "green"), cex=0.7)
#Example 1 - compare the distribution of 1000 random uniforms
x <- rexp(1000,lambda)
hist(x,xlab="x-Values of random exponential generation",20)
abline(v = 1/lambda, col = "red", lwd = 2)
abline(v = mean(x), col = "green", lwd = 2)
legend(x="topright", legend=c("Theoretical mean", "Sample Mean"), lty=1, lwd=1, col = c("red", "green"), cex=0.7)
#Example 1 - compare the distribution of 1000 random uniforms
x <- rexp(1000,lambda)
hist(x,xlab="x-Values of random exponential generation",20)
abline(v = 1/lambda, col = "red", lwd = 2)
abline(v = mean(x), col = "green", lwd = 2)
legend(x="topright", legend=c("Theoretical mean", "Sample Mean"), lty=1, lwd=1, col = c("red", "green"), cex=0.7)
#Example 2 - distribution of 1000 averages of 40 random uniforms
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,lambda)))
hist(mns)
t.test(mean(expo_40), 1/lambda, alternative = "two.sided", paired = FALSE, var.equal = FALSE, conf.level = 0.95)
#Standard Setting
lambda <- 0.2
seed <- set.seed(153)
n <- 40
t <- 1000
#Create dataset with n=40
seed
expo_40 <- rexp(n, lambda)  #Mean = 1/Lambda; Standard Deviation = 1/Lambda
t.test(mean(expo_40), 1/lambda, alternative = "two.sided", paired = FALSE, var.equal = FALSE, conf.level = 0.95)
means_dens <- density(means)
x <- seq(min(means), max(means), length=t)
hx <- dnorm(x ,mean = 1/lambda, sd = sd(means))
hist(means,xlab="Means of random samples with n=40",20)
lines(mydensity, col = "blue")
lines(means_dens, col = "blue")
hist(means,xlab="Means of random samples with n=40",20)
lines(means_dens, col = "blue")
means_dens
lines(x=x, y=hx, type="l")
hist(means,xlab="Means of random samples with n=40",20)
lines(means_dens&y, col = "blue")
lines(x=x, y=hx, type="l")
hist(means,xlab="Means of random samples with n=40",20)
lines(means_dens$y, col = "blue")
lines(x=x, y=hx, type="l")
hist(means,xlab="Means of random samples with n=40",20)
lines(means_dens&y, col = "blue")
lines(x=x, y=hx, type="l")
hist(means,xlab="Means of random samples with n=40",20)
lines(means_dens$y, col = "blue")
lines(x=x, y=hx, type="l")
x <- seq(min(means), max(means), length=t)
hx <- dnorm(x ,mean = 1/lambda, sd = sd(means))
means_dens$y
hist(means,xlab="Means of random samples with n=40",20)
lines(means_dens$y*1000, col = "blue")
lines(x=x, y=hx*1000, type="l")
hist(means,xlab="Means of random samples with n=40",20)
lines(means_dens$y*1000, col = "blue")
lines(x=x, y=hx*1000, type="l",col = "red")
hist(means,xlab="Means of random samples with n=40",20)
lines(means_dens$y*1000, col = "blue")
lines(x=x, y=hx*1000, type="l",col = "red")
#Creation of supporting variables for Historgram, Density and Bell Curve
x <- seq(min(means), max(means), length=t)
hx <- dnorm(x ,mean = 1/lambda, sd = sd(means))
myhist <- hist(means,xlab="Means of random samples with n=40",20)
multiplier <- myhist$counts / myhist$density
means_dens <- density(means)
mydensity$y <- mydensity$y * multiplier[1]
#Plotting of relevant curves
plot(myhist)
lines(mydensity)
lines(mydensity, col = "blue")
plot(myhist)
lines(mydensity, col = "blue")
plot(myhist)
lines(mydensity$y, col = "blue")
plot(myhist)
lines(mydensity$x, mydensity$y, col = "blue")
myhist <- hist(means,xlab="Means of random samples with n=40",20)
multiplier <- myhist$counts / myhist$density
means_dens <- density(means)
means_dens$y <- means_dens$y * multiplier[1]
plot(myhist)
lines(mydensity, col = "blue")
plot(myhist)
lines(means_dens, col = "blue")
plot(myhist)
lines(means_dens, col = "blue")
lines(x=x, y=hx*100, type="l",col = "red")
plot(myhist)
lines(means_dens, col = "blue")
lines(x=x, y=hx*1000, type="l",col = "red")
plot(myhist)
lines(means_dens, col = "blue")
lines(x=x, y=hx*1000, type="l",col = "red")
pnorm(0.5, mean = 5, sd = sd(means))
pnorm(5, mean = 5, sd = sd(means))
lines(x=x, y=hx*1000, type="l",col = "red")
hallo
lines(x=x, y=hx*1000, type="l",col = "red")
plot(x=x, y=hx*1000, type="l",col = "red")
plot(x=x, y=hx, type="l",col = "red")
x <- seq(min(means), max(means), length=t)
hx <- dnorm(x ,mean = 1/lambda, sd = 1/lamdba)
hx <- dnorm(x ,mean = 1/lambda, sd = 1/lambda)
myhist <- hist(means,xlab="Means of random samples with n=40",20)
multiplier <- myhist$counts / myhist$density
means_dens <- density(means)
means_dens$y <- means_dens$y * multiplier[1]
#Plotting of relevant curves
plot(myhist)
lines(means_dens, col = "blue")
lines(x=x, y=hx, type="l",col = "red")
#Plotting of relevant curves
plot(myhist)
lines(means_dens, col = "blue")
lines(x=x, y=hx*1000, type="l",col = "red")
hist(sds,xlab="Standard Deviation (SD) of random samples with n=40",20)
myhist <- hist(means,xlab="Means of random samples with n=40",20)
myhist$counts
myhist$density
x <- means_dens$x
hx <- dnorm(x ,mean = 1/lambda, sd = 1/lambda)*multiplier
#Plotting of relevant curves
plot(myhist)
lines(means_dens, col = "blue")
lines(x=x, y=hx, type="l",col = "red")
plot(myhist)
lines(means_dens, col = "blue")
lines(as.dataframe(x=x, y=hx), type="l",col = "red")
plot(myhist)
lines(means_dens, col = "blue")
lines(as.data.frame(x=x, y=hx), type="l",col = "red")
xhx <- as.data.frame(c(x,hx))
plot(xhx)
xhx <- as.data.frame(x,hx)
xhx <- c(x,hx)
xhx <- as.matrix(c(x,hx),nrow=2)
xhx <- as.matrix(c(x,hx),ncol=2)
?as.data.frame
r(x,hx)
cbind(x,hx)
xhx <- cbin(x,hx)
xhx <- cbind(x,hx)
plot(xhx)
xhx$hx*multiplier
xhx <- as.data.frame(cbind(x,hx))
xhx$hx*multiplier
means_dens$y
xhx$hx <- xhx$hx * multiplier[1]
plot(xhx)
xhx <- as.data.frame(cbind(x,hx))
xhx$hx <- xhx$hx * 100
plot(xhx)
x <- means_dens$x
hx <- dnorm(x ,mean = 1/lambda, sd = 1/lambda)*multiplier
xhx <- as.data.frame(cbind(x,hx))
x <- means_dens$x
hx <- dnorm(x ,mean = 1/lambda, sd = 1/lambda)*multiplier[1]
xhx <- as.data.frame(cbind(x,hx))
plot(hxh)
plot(xhx)
plot(myhist)
lines(means_dens, col = "blue")
lines(as.data.frame(x=x, y=hx), type="l",col = "red")
plot(myhist)
lines(means_dens, col = "blue")
lines(xhx, type="l",col = "red")
plot(myhist)
lines(means_dens, col = "blue")
lines(x=xhx$x,y=xhx$y, type="l",col = "red")
x <- seq(min(means), max(means), length=t)
hx <- dnorm(x,mean = 1/lambda, sd = sd(means))
plot(x=x, y=hx, type="l")
x <- seq(min(means), max(means), length=t)
hx <- dnorm(x,mean = 1/lambda, sd = 1/lambda)
plot(x=x, y=hx, type="l")
x <- seq(min(means), max(means), length=t)
hx <- dnorm(x,mean = 1/lambda, sd = sd(means))
plot(x=x, y=hx, type="l")
ggplot(means, aes(x=means)) +
labs(x="similuated mean", title="Distribution of Averages of Samples vs Theoretical Mean") +
geom_histogram(aes(y=..density..), color="green", fill="blue", size=1, binwidth=0.2) +
geom_density(color="green", size=1) +
stat_function(fun=dnorm, arg=list(mean=1/lambda, sd=1/lambda), color = "red", size=1) +
geom_vline(xintercept=1/lambda, color="red", size=1)
ggplot(means, aes(x=means)) +
labs(x="similuated mean", title="Distribution of Averages of Samples vs Theoretical Mean") +
geom_histogram(aes(y=..density..), color="green", fill="blue", size=1, binwidth=0.2) +
geom_density(color="green", size=1) +
stat_function(fun=dnorm, arg=list(mean=1/lambda, sd=1/lambda), color = "red", size=1) +
geom_vline(xintercept=1/lambda, color="red", size=1)
theoreticalMean=1/lambda
theoreticalSD=1/lambda
ggplot(means, aes(x=means)) +
labs(x="similuated mean", title="Distribution of Averages of Samples vs Theoretical Mean") +
geom_histogram(aes(y=..density..), color="green", fill="blue", size=1, binwidth=0.2) +
geom_density(color="green", size=1) +
stat_function(fun=dnorm, arg=list(mean=theoreticalMean, sd=theoreticalSD), color = "red", size=1) +
geom_vline(xintercept=theoreticalMean, color="red", size=1)
theoreticalSD <- sqrt((1/lambda)/(n-1))
theoreticalMean <- (1/lambda)
means_avrg <- mean(means)
means_sd <- sd(means)
theoreticalSD <- sqrt((1/lambda)/(1000-1))
x <- means_dens$x
hx <- dnorm(x ,mean = theoreticalMean, sd = theoreticalSD)*multiplier[1]
xhx <- as.data.frame(cbind(x,hx))
plot(myhist)
lines(means_dens, col = "blue")
lines(x=xhx$x,y=xhx$y, type="l",col = "red")
plot(myhist)
lines(means_dens, col = "blue")
lines(x=xhx$x,y=xhx$y, type="l",col = "red")
x <- means_dens$x
hx <- dnorm(x ,mean = theoreticalMean, sd = theoreticalSD)
xhx <- as.data.frame(cbind(x,hx))
plot(xhx)
theoreticalSD <- sqrt((1/lambda)/(40-1))
x <- means_dens$x
hx <- dnorm(x ,mean = theoreticalMean, sd = theoreticalSD)
xhx <- as.data.frame(cbind(x,hx))
plot(xhx)
theoreticalSD <-(1/lambda)/ sqrt((40-1))
x <- means_dens$x
hx <- dnorm(x ,mean = theoreticalMean, sd = theoreticalSD)
xhx <- as.data.frame(cbind(x,hx))
plot(xhx)
plot(myhist)
lines(means_dens, col = "blue")
lines(xhx,col = "red")
x <- means_dens$x
hx <- dnorm(x ,mean = theoreticalMean, sd = theoreticalSD)*40
xhx <- as.data.frame(cbind(x,hx))
plot(myhist)
lines(means_dens, col = "blue")
lines(xhx,col = "red")
hx <- dnorm(x ,mean = theoreticalMean, sd = theoreticalSD)*1000
plot(myhist)
lines(means_dens, col = "blue")
lines(xhx,col = "red")
xhx <- as.data.frame(cbind(x,hx))
plot(myhist)
lines(means_dens, col = "blue")
lines(xhx,col = "red")
hx <- dnorm(x ,mean = theoreticalMean, sd = theoreticalSD)*length(x)
xhx <- as.data.frame(cbind(x,hx))
plot(myhist)
lines(means_dens, col = "blue")
lines(xhx,col = "red")
length(x)
x <- means_dens$x
hx <- dnorm(x ,mean = theoreticalMean, sd = theoreticalSD)
xhx <- as.data.frame(cbind(x,hx))
plot(xhx)
head(multiplier,20)
head(multiplier,200)
x <- means_dens$x
hx <- dnorm(x ,mean = theoreticalMean, sd = theoreticalSD)*multiplier[1]
xhx <- as.data.frame(cbind(x,hx))
plot(myhist)
lines(means_dens, col = "blue")
lines(xhx,col = "red")
legend("topright", legend=c("Density Function", "Normal Distribution"), col = c("blue", "red"), lty=1, lwd = 1)
plot(myhist)
lines(means_dens, col = "blue")
lines(xhx,col = "red")
legend("topright", legend=c("Density Function", "Normal Distribution"), col = c("blue", "red"), lty=1, lwd = 1, cex=0.8)
hist(sds,xlab="Standard Deviation (SD) of Random Samples with n=40",20)
abline(v = 1/lambda, col = "red", lwd = 2)
abline(v = mean(sds), col = "green", lwd = 2)
legend(x="topright", legend=c("Theoretical SD", "Mean SD of sample"), lty=1, lwd=1, col = c("red", "green"), cex=0.8)
hist(means,xlab="Means of random samples with n=40",20)
abline(v = theoreticalMean, col = "red", lwd = 2)
abline(v = means_avrg, col = "green", lwd = 2)
legend(x="topright", legend=c("Theoretical Mean", "Sample Mean"), lty=1, lwd=1, col = c("red", "green"), cex=0.8)
t.test(means_dens$y, xhx$hx, alternative = "two.sided",
paired = FALSE, var.equal = FALSE, conf.level = 0.95)
?t.test
?shuttle
install.packages("MASS")
#Clear Working Environment
rm(list=ls())
cat("\f")
#Loading necessary libraries
library(readr)
library(dplyr)
library(ggplot2)
library(MASS)
#1
?shuttle
data(shuttle)
dim(shuttle)
summary(shuttle$use)
summary(shuttle)
?gsub
shuttle$use <- as.factor(gsub(shuttle$use,"noauto","0"))
shuttle$use <- as.factor(gsub("noauto","0",shuttle$use))
summary(shuttle$use)
str(shuttle$use)
summary(shuttle)
data(shuttle)
shuttle$use <- as.factor(shuttle$use)
summary(shuttle$use)
shuttle$use <- shuttle$use %>%
mutate(use=="auto" -> 1)
data(shuttle)
shuttle$use <- shuttle$use %>%
mutate(use=="auto" -> 1)
?mutate
?dplyr::mutate
shuttle$use <- shuttle$use %>%
mutate(which(use=="auto"))
shuttle$use <- shuttle$use %>%
mutate(which(use==1))
summary(shuttle)
lm(use ~ as.factor(wind), data=shuttle)
shuttle %>%
filter(use=="wind" & wind=="head")
shuttle %>%
filter(use=="wind" | wind=="head")
shuttle %>%
filter(use=="wind" && wind=="head")
shuttle %>%
filter(use=="wind") %>%
filter(wind=="head")
shuttle %>%
filter(use=="auto") %>%
filter(wind=="head")
shuttle %>%
filter(use=="auto") %>%
filter(wind=="head") %>%
count
nr_autoheadwind <- shuttle %>%
filter(use=="auto") %>%
filter(wind=="head") %>%
count
View(nr_autoheadwind)
odds_ratio <- nr_autoheadwind/(length(shuttle)-nr_autoheadwind)
odds_ratio
odds_ratio <- nr_autoheadwind/(length(t(shuttle))-nr_autoheadwind); odds_ratio
length(t(shuttle))
odds_ratio <- nr_autoheadwind/(length(shuttle$use)-nr_autoheadwind); odds_ratio
odds_ratio <- (length(shuttle$use)-nr_autoheadwind)/nr_autoheadwind; odds_ratio
glm(use ~ as.factor(wind), data=shuttle)
glm(use ~ wind, data=shuttle)
data(shuttle)
glm(use ~ wind, data=shuttle)
glm(use ~ wind, data=shuttle,family=binomial(link="logit"))
